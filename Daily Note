---
type: Daily note
summary: 
Created: "{{date: YYYY-MM-DD-dddd}}"
On this day: "[[{{date-1Y: YYYY-MM-DD-dddd}}]]"

---
[[ <% tp.date.now("YYYY-MM-DD-dddd", -1, tp.file.title, "YYYY-MM-DD-dddd") %>]] <== today ==> [[<% tp.date.now("YYYY-MM-DD-dddd", 1, tp.file.title, "YYYY-MM-DD-dddd") %>]]
# <% moment(tp.file.title,'YYYY-MM-DD').format("dddd, MMMM DD, YYYY") %>

<%*
const response = await fetch('https://wttr.in/Kagurazaka?format=%l+%T:+%c+%C+%x+%t+%h+%p+%w+%P+%m');
const weather = await response.text();
tR += weather;
%>

___
#### Note Activity Today...
```dataview
TABLE created, modified, type, tags
FROM "" AND !"Daily notes" AND !"Templates" AND !"APD pages"
WHERE contains(dateformat(file.ctime, "YYYY-MM-dd"), dateformat(this.file.day, "YYYY-MM-dd")) OR contains(dateformat(file.mtime, "YYYY-MM-dd"), dateformat(this.file.day, "YYYY-MM-dd"))
SORT created asc
```
<BR>

#### Upcoming birthdays (1 month)
```dataviewjs
const pages = dv.pages('"People"')
  .where(p => p.type == "people" && Array.isArray(p.dates) && p.dates.length > 0)
  .filter(p => p.dates.some(date => date.includes("Birthday")));

const today = new Date();

const result = pages.map(p => {
  const birthdays = p.dates
    .filter(date => date.includes("Birthday"))
    .map(date => new Date(date.split("|")[0].trim()));

  const calculateDaysUntilNextBirthday = (birthday) => {
    const nextBirthday = new Date(today.getFullYear(), birthday.getMonth(), birthday.getDate());
    if (nextBirthday < today) {
      nextBirthday.setFullYear(today.getFullYear() + 1);
    }
    return Math.ceil((nextBirthday - today) / (1000 * 60 * 60 * 24));
  };

  const validBirthdays = birthdays.map(birthday => {
    const daysUntil = calculateDaysUntilNextBirthday(birthday);
    return { birthday, daysUntil };
  }).filter(b => b.daysUntil >= 0 && b.daysUntil <= 30);

  const todayBirthdays = birthdays.filter(birthday => {
    const birthdayDate = new Date(today.getFullYear(), birthday.getMonth(), birthday.getDate());
    return birthdayDate.toDateString() === today.toDateString();
  });

  const allValidBirthdays = validBirthdays.concat(todayBirthdays.map(b => ({
    birthday: b,
    daysUntil: 0
  })));

  if (allValidBirthdays.length === 0) return null;

  const nextBirthday = allValidBirthdays.reduce((closest, b) => {
    return b.daysUntil < closest.daysUntil ? b : closest;
  });

  const daysUntilNextBirthday = nextBirthday.daysUntil;

  const birthdayDate = new Date(today.getFullYear(), nextBirthday.birthday.getMonth(), nextBirthday.birthday.getDate());
  if (birthdayDate < today) {
    birthdayDate.setFullYear(today.getFullYear() + 1);
  }

  const originalBirthday = nextBirthday.birthday;
  let turns = today.getFullYear() - originalBirthday.getFullYear();

  if (today.getDate() === originalBirthday.getDate() && today.getMonth() === originalBirthday.getMonth()) {
    turns = today.getFullYear() - originalBirthday.getFullYear();
  } else if (today >= new Date(today.getFullYear(), originalBirthday.getMonth(), originalBirthday.getDate())) {
    turns++;
  }

  const formattedBirthday = birthdayDate.toLocaleDateString("en-US", {
    weekday: 'short',
    day: 'numeric',
    month: 'long',
  });

  return {
    name: "[[" + p.file.name + "]]",
    birthday: formattedBirthday,
    daysUntilNextBirthday: daysUntilNextBirthday,
    turns: turns
  };
}).filter(p => p !== null);

const sortedResult = result.sort((a, b) => a.daysUntilNextBirthday - b.daysUntilNextBirthday);

const formattedResult = sortedResult.map(p => [
  p.name,
  p.birthday,
  p.daysUntilNextBirthday,
  p.turns
]);

dv.table(["Name", "Birthday", "Days Until Next Birthday", "Turns"], formattedResult);

```



